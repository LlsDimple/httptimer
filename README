======================
httptimer Application:
======================
Schedules HTTP Requests using a simple JSON API.
httptimer depends on webmachine, ibrowse, and Erlang/OTP of course.



A small tutorial how to use the JSON API of httptimer using jQuery
==================================================================
// Calculates the unix timestamp
function now() {
	return  Math.round(new Date().getTime() / 1000);
}

// 0. Ajax Settings
// ----------------
$.ajaxSetup({
	// url pointing to the running httptimer service
	url: 'http://localhost:8000/timer',
	// setting the content-type used for the request
	contentType : 'application/json',
	// setting the dataType used within the response
	dataType : 'json',
	// enable http basic auth within the requests
	beforeSend : function(jqXHR) {
		jqXHR.setRequestHeader('Authorization', 'Basic dXNlcm5hbWU6cGFzc3dvcmQ=');
	},
});

// 1. Scheduling a new timer 
// -------------------------
var data = {
	// url to be requested by httptimer
	url : 'http://localhost:8000/timer_test/123',
	// http method used for this request
	method : 'post',
	// http headers set for this request
	headers : [], // e.g. [{"User-Agent" : "httptimer"}]
	// request body
	body : 'hello world',
	// api key
	key : 1234567,
	// execution time for this request (unix timestamp)
	time :  now() + 200
};
// Use http PUT for scheduling a new timer
$.ajax({ type : 'PUT', data : JSON.stringify(data), 
	success : function(data, textStatus, jqXHR) {
			alert(data.timerId); 
	// the timerId must be used to later retrieve information about the timer or if the timer should be deleted. For the further documentation I use TIMERID whenever I refer to such a timerId.
	}
});

// 2. Retrieving timer information
// -------------------------------
var data = {
	// api key
	key = 1234567,
	// timer id
	timerId = TIMERID
};

// Use http GET for retrieving the information of a scheduled timer
$.ajax({ type : 'GET', data : JSON.stringify(data)});

// 3. Deleting a timer
// -------------------
var data = {
	// api key
	key = 1234567,
	// timer id
	timerId = TIMERID
};

// Use http DELETE for deleting a scheduled timer
$.ajax({ type : 'DELETE', data : JSON.stringify(data)});


You should find in this directory:
==================================
README : this file
Makefile : simple make commands
rebar : the Rebar build tool for Erlang applications
rebar.config : configuration for Rebar
start.sh : simple startup script for running httptimer
/src
  /httptimer.app.src : the Erlang app specification / configuration
  /httptimer.erl : Startup module
  /httptimer_app.erl : base module for the Erlang application
  /httptimer_sup.erl : OTP supervisor for the application
  /httptimer_resource.erl : the httptimer Webmachine resource
  /httptimer.hrl : headerfile defining the Timer record
  /date_util.erl : helper functions for handling time and date
  /timer_manager.erl : httptimer Backend module
  /timer_store.erl : Mnesia Frontend Module
  /test_resource.erl : simple Webmachine resource used for some manual tests
/priv
  /dispatch.conf : the Webmachine URL-dispatching table

You probably want to do one of a couple of things at this point:

Build the httptimer application:
   $ make
   - or -
   $ ./rebar compile

Start up the httptimer application:
   $ ./start.sh

TODOs:
======
- The API key is unused at the moment. As a next step I will improve authentication, authorization and accounting.
- So far I tested the application manually using curl and jQuery, I would like to see this automated in the future.
- Currently you must provide the execution time as a Unix timestamp, in terms of usability this needs to be improved. Moreover httptimer does not yet support repetitive timers.
